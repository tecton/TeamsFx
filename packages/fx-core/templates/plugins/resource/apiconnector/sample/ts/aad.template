import {
  TeamsFx,
  createApiClient,
  BearerTokenAuthProvider,
  IdentityType,
} from "@microsoft/teamsfx";

// Loads current app's configuration and use app for auth, the sample uses client credential flow to acquire token for your API.
{{#if (equals config.AuthConfig.ReuseTeamsApp true)}}
const teamsFx = new TeamsFx(IdentityType.App);
{{else}}
const teamsFx = new TeamsFx(IdentityType.App, {
  // You can replace the default authorityHost url with actual value per your requirement.
  authorityHost: "https://login.microsoftonline.com",
  tenantId: process.env.TEAMSFX_API_{{capitalName}}_TENANT_ID,
  clientId: process.env.TEAMSFX_API_{{capitalName}}_CLIENT_ID,
  // Please add your client secret to .env.teamsfx.local before local debugging.
  clientSecret: process.env.TEAMSFX_API_{{capitalName}}_CLIENT_SECRET,
});
{{/if}}
// Initializes a new axios instance to call {{config.APIName}} API.
const appCredential = teamsFx.getCredential();
const authProvider = new BearerTokenAuthProvider(
  // Please replace '<your-api-scope>' with actual api scope value.
  async () => (await appCredential.getToken("<your-api-scope>"))?.token
);
const {{config.APIName}}Client = createApiClient(
  teamsFx.getConfig("TEAMSFX_API_{{capitalName}}_ENDPOINT"),
  authProvider
);
export { {{config.APIName}}Client };
