name: E2E test

on:
  workflow_dispatch:
    inputs:
      cases:
        description: 'specific cases to be excuted. Sample: ["./aad/a.tests.ts", "./bot/b.tests.ts"]. Set empty to run all cases'
        required: false
  schedule:
    - cron: "0 5 * * *"
  pull_request:
    branches:
      - main
      - dev
      - hotfix/**/*
    types:
      - assigned
      - opened
      - synchronize
      - reopened
      - edited

jobs:
  check-pr:
    if: ${{  github.event_name == 'pull_request' }}
    runs-on: ubuntu-latest
    steps:
      - name: Setup node
        uses: actions/setup-node@v2.1.2
        with:
          node-version: 14

      - name: Install parser cli
        run: |
          npm install --global conventional-commits-parser

      - name: Check PR
        id: check_title
        run: |
          declare -a types=("fix" "feat" "refactor")
          type=`echo "${{ github.event.pull_request.title }}" |  conventional-commits-parser | jq -r '.[].type'`
          if [[ " ${types[*]} " =~ " ${type} " ]]; then
            if (cat <<- 'EOF_HEREDOC' |
              ${{ github.event.pull_request.body }}
          EOF_HEREDOC
              grep -q 'E2E TEST:'
            ); then
              echo "::set-output name=passed::true"
            else
              echo "::set-output name=passed::false"
            fi
          else
            echo "::set-output name=passed::true"
          fi

      - name: Search comment
        if: ${{ steps.check_title.outputs.passed == 'false' }}
        uses: peter-evans/find-comment@v1
        id: comments
        with:
          issue-number: ${{ github.event.pull_request.number }}
          body-includes: "E2E TEST:"

      - name: Check if test is included in comments
        if: ${{ steps.check_title.outputs.passed == 'false' }}
        run: |
          if [ -z "${{ steps.comments.outputs.comment-id }}" ]; then
            echo "E2E TEST not found."
            exit 1
          fi

  setup:
    if: ${{  github.event_name != 'pull_request' }}
    runs-on: ubuntu-latest
    outputs:
      cases: ${{ steps.schedule-cases.outputs.cases || steps.dispatch-cases.outputs.cases || steps.pr-cases.outputs.cases }}
    env:
      AZURE_ACCOUNT_NAME: ${{ secrets.TEST_USER_NAME }}
      AZURE_ACCOUNT_OBJECT_ID: ${{ secrets.TEST_USER_OBJECT_ID }}
      AZURE_ACCOUNT_PASSWORD: ${{ secrets.TEST_USER_PASSWORD }}
      AZURE_SUBSCRIPTION_ID: ${{ secrets.TEST_SUBSCRIPTION_ID }}
      AZURE_TENANT_ID: ${{ secrets.TEST_TENANT_ID }}
      M365_ACCOUNT_NAME: ${{ secrets.TEST_USER_NAME }}
      M365_ACCOUNT_PASSWORD: ${{ secrets.TEST_USER_PASSWORD }}
      M365_TENANT_ID: ${{ secrets.TEST_TENANT_ID_2 }}
      CI_ENABLED: "true"
      M365_ACCOUNT_COLLABORATOR: ${{ secrets.TEST_COLLABORATOR_USER_NAME }}
      AZURE_DEVOPS_EXT_PAT: ${{ secrets.ADO_PAT }}
    steps:
      - name: Checkout
        uses: actions/checkout@v2

      - name: Setup node
        uses: actions/setup-node@v2.1.2
        with:
          node-version: 14

      - name: Setup project
        uses: nick-invision/retry@v2
        with:
          timeout_minutes: 10
          max_attempts: 10
          retry_on: error
          command: |
            npm run setup

      - name: List cases for schedule
        id: schedule-cases
        if: ${{  github.event_name == 'schedule' }}
        working-directory: packages/cli/tests/e2e
        run: |
          cases=`find . -wholename "*.tests.ts" | jq -Rsc '[split("\n") | .[]| select(.!="")]'`
          echo "::set-output name=cases::$cases"

      - name: List cases for dispatch
        id: dispatch-cases
        if: ${{  github.event_name == 'workflow_dispatch' }}
        working-directory: packages/cli/tests/e2e
        run: |
          inputCases='${{ github.event.inputs.cases }}'
          if [ -z "$inputCases" ]; then
            allCases=`find . -wholename "*.tests.ts" | jq -Rsc '[split("\n") | .[]| select(.!="")]'`
            echo "::set-output name=cases::$allCases"
          else
            echo "::set-output name=cases::$inputCases"
          fi

      - name: E2E Test clean
        working-directory: packages/cli
        run: |
          npm run test:e2e:clean

      - name: Create new test plan
        if: ${{ github.ref_name == 'main' && github.event_name != 'pull_request' }}
        run: |
          version=$(node -p -e "require('./packages/cli/package.json').version")
          npx ts-node .github/scripts/testPlan.ts new cli $version

  execute-case:
    if: ${{ needs.setup.outputs.cases }}
    env:
      AZURE_ACCOUNT_NAME: ${{ secrets.TEST_USER_NAME }}
      AZURE_ACCOUNT_OBJECT_ID: ${{ secrets.TEST_USER_OBJECT_ID }}
      AZURE_ACCOUNT_PASSWORD: ${{ secrets.TEST_USER_PASSWORD }}
      AZURE_SUBSCRIPTION_ID: ${{ secrets.TEST_SUBSCRIPTION_ID }}
      AZURE_TENANT_ID: ${{ secrets.TEST_TENANT_ID }}
      M365_ACCOUNT_NAME: ${{ secrets.TEST_USER_NAME }}
      M365_ACCOUNT_PASSWORD: ${{ secrets.TEST_USER_PASSWORD }}
      M365_TENANT_ID: ${{ secrets.TEST_TENANT_ID_2 }}
      CI_ENABLED: "true"
      M365_ACCOUNT_COLLABORATOR: ${{ secrets.TEST_COLLABORATOR_USER_NAME }}
      AZURE_DEVOPS_EXT_PAT: ${{ secrets.ADO_PAT }}
    needs: setup
    runs-on: ubuntu-latest
    strategy:
      fail-fast: false
      matrix:
        cases: ${{ fromJson(needs.setup.outputs.cases) }}
    name: ${{ matrix.cases }}

    steps:
      - name: Checkout
        uses: actions/checkout@v2

      - name: Setup node
        uses: actions/setup-node@v2.1.2
        with:
          node-version: 14

      - name: Download Simple Auth bits
        uses: nick-invision/retry@v2
        with:
          timeout_minutes: 10
          max_attempts: 10
          retry_on: error
          shell: pwsh
          command: |
            ./.github/scripts/download-simpleauth.sh

      - name: Setup project
        uses: nick-invision/retry@v2
        with:
          timeout_minutes: 10
          max_attempts: 10
          retry_on: error
          command: |
            npm run setup

      - name: Package CLI and install
        working-directory: packages/cli
        run: |
          rm -f *.tgz
          npm pack
          mv *.tgz teamsfx-cli.tgz
          npm install -g teamsfx-cli.tgz

      - name: print system info
        run: |
          lscpu

      - name: run test
        working-directory: packages/cli/tests/e2e
        run: |
          file=`find . -wholename "${{ matrix.cases }}"`
          if [ ! -z "$file" ]; then
            npx mocha --reporter mochawesome --timeout 900000 $file
          fi

      - name: get report name
        id: get-report-name
        if: ${{ always() }}
        run: |
          name="${{ matrix.cases }}"
          name="${name//'.tests.ts'/}"
          name="${name//.\//}"
          name="${name//\//_}"
          echo "::set-output name=name::$name"

      - name: Upload test report
        uses: actions/upload-artifact@v2
        if: failure()
        with:
          name: ${{ steps.get-report-name.outputs.name }}.json
          path: |
            ./packages/cli/tests/e2e/mochawesome-report/mochawesome.json

      - name: Sync to Azure DevOps Test Plan
        if: ${{ always() && (github.event_name == 'schedule' || github.event_name == 'workflow_dispatch') }}
        run: |
          version=$(node -p -e "require('./packages/cli/package.json').version")
          npx ts-node .github/scripts/testPlan.ts sync ./packages/cli/tests/e2e/mochawesome-report/mochawesome.json cli $version

  report:
    if: ${{ always() && github.event_name == 'schedule' }}
    needs: execute-case
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v2

      - name: Install Dateutils
        run: |
          sudo apt install dateutils

      - name: List jobs
        id: list-jobs
        working-directory: packages/cli
        run: |
          result=`curl \
            -u :${{ secrets.GITHUB_TOKEN }}\
            https://api.github.com/repos/OfficeDev/TeamsFx/actions/runs/${{ github.run_id }}/attempts/${{ github.run_attempt }}/jobs?per_page=100`


          cases=`echo $result | jq -r '.jobs[] | select(.name | contains("tests.ts")) | .name'`

          lists=""
          passed=0
          failed=0

          emails="vsciotadt@microsoft.com"
          while IFS= read -r case;
          do
            if [ -z "$case" ]; then
              continue
            fi

            file="tests/e2e/$case"
            elegant_path="${file//.\//}"

            email=""
            if grep -q "@author" $file; then
              email=`grep '@author' $file | grep -i -o '[A-Z0-9._%+-]\+@[A-Z0-9.-]\+\.[A-Z]\{2,4\}'`
            fi

            status=`echo $result | jq --arg case $case -r '.jobs[] | select(.name == $case ) | .conclusion'`

            if [[ ! -z "$email" && ! "$emails" == *"$email"* && "$status" == "failure" ]]; then
              emails="$emails;$email"
            fi

            started_at=`echo $result | jq --arg case $case -r '.jobs[] | select(.name == $case ) | .started_at'`
            completed_at=`echo $result | jq --arg case $case -r '.jobs[] | select(.name == $case ) | .completed_at'`
            duration=`dateutils.ddiff $started_at $completed_at -f "%Mm %Ss"`

            author=""
            if [ -z "$email" ]; then
              author="N/A"
            else
              author="<a href=\\\"mailto:$email\\\"><span>$email</span></a>"
            fi

            lable=""
            if [ "$status" == "success" ]; then
              passed=$((passed+1))
              label="<span style=\\\"background-color:#2aa198;color:white;font-weight:bold;\\\">PASSED</span>"
            else
              failed=$((failed+1))
              label="<span style=\\\"background-color: #dc322f;color:white;font-weight:bold;\\\">FAILED</span>"
            fi

            url=`echo $result | jq --arg case $case -r '.jobs[] | select(.name == $case ) | .html_url'`
            url="<a href=\\\"$url\\\">For Detail</a>"

            row="<tr> <td style=\\\"text-align: left;\\\">$elegant_path</td> <td style=\\\"text-align: center;\\\">$label</td> <td style=\\\"text-align: center;\\\">$author</td> <td>$duration</td> <td>$url</td> </tr>"

            if [ "$status" == "success" ]; then
              lists="$lists $row"
            else
              lists="$row $lists"
            fi

          done <<< $cases

          body="<table class=\\\"w3-table w3-striped w3-bordered\\\"> <tr> <th>Case</th> <th>Status</th> <th>Author</th> <th>Duration</th> <th>URL</th> </tr> $lists </table> <br /> The detail can be found here: <a> https://github.com/OfficeDev/TeamsFx/actions/runs/${{ github.run_id }} </a>"

          total=$((passed+failed))

          subject="TeamsFx E2E Test Report ($passed/$total Passed)"
          if [ $failed -gt 0 ]; then
            subject="[FAILED] $subject"
          else
            subject="[PASSED] $subject"
          fi

          echo "::set-output name=body::$body"
          echo "::set-output name=to::$emails"
          echo "::set-output name=subject::$subject"

      - name: Send E-mail to the whole team
        uses: satak/webrequest-action@master
        with:
          url: https://prod-30.eastus.logic.azure.com:443/workflows/9aa865da96054bd89749c2d4ce68df8e/triggers/manual/paths/invoke?api-version=2016-10-01&sp=%2Ftriggers%2Fmanual%2Frun&sv=1.0&sig=uIoB06NUHSnKoZeWjNDI9t4rrhbTBKxJNiBtDoMRSQs
          method: POST
          payload: |
            {
              "to": "${{ steps.list-jobs.outputs.to }}",
              "body": "${{ steps.list-jobs.outputs.body }}",
              "subject": "${{ steps.list-jobs.outputs.subject }}",
              "apiKey": "${{ secrets.MAIL_API_KEY }}"
            }
